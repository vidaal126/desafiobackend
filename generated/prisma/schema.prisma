generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internalAccount   InternalAccount? @relation(fields: [internalAccountId], references: [id])
  internalAccountId Int?             @unique

  carts Cart[]
}

model InternalAccount {
  id            Int     @id @default(autoincrement())
  numberAccount String  @unique
  agency        String
  balance       Decimal @default(0) @db.Decimal(10, 2)

  user            User[]
  rechargeHistory RechargeHistory[]
}

model RechargeHistory {
  id        Int      @id @default(autoincrement())
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  internalAccount   InternalAccount @relation(fields: [internalAccountId], references: [id])
  internalAccountId Int
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  value     Decimal  @db.Decimal(10, 2)
  quantity  Int
  createdAt DateTime @default(now())

  cartItems CartItem[]
}

model Cart {
  id          Int        @id @default(autoincrement())
  status      CartStatus @default(PENDENTE)
  description String?
  totalValue  Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  items      CartItem[]
  purchase   PurchaseHistory? @relation(fields: [purchaseId], references: [id])
  purchaseId Int?             @unique
}

model CartItem {
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  discount  Decimal @default(0) @db.Decimal(10, 2)

  @@id([cartId, productId])
}

model PurchaseHistory {
  id        Int            @id @default(autoincrement())
  status    PurchaseStatus
  amount    Decimal        @db.Decimal(10, 2)
  createdAt DateTime       @default(now())

  cart Cart[]
}

enum CartStatus {
  PENDENTE
  PROCESSANDO
  AGUARDANDO_CONFIRMAÇÃO
  PAGO
  REJEITADO
}

enum PurchaseStatus {
  PENDENTE
  PROCESSANDO
  AGUARDANDO_CONFIRMAÇÃO
  PAGO
  REJEITADO
}
